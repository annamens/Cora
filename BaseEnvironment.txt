/*******************************************************************************
 * Copyright (c) 2022 by Adaptive Biotechnologies, Co. All rights reserved
 *******************************************************************************/
package com.adaptivebiotech.test;

import static com.seleniumfy.test.utils.Logging.error;
import static org.testng.util.Strings.isNullOrEmpty;
import java.io.File;
import java.io.FileInputStream;
import java.util.Properties;
import com.seleniumfy.test.utils.Environment;

/**
 * @author Harry Soehalim
 *         <a href="mailto:hsoehalim@adaptivebiotech.com">hsoehalim@adaptivebiotech.com</a>
 */
public class BaseEnvironment extends Environment {

    public static String     version;
    public static String     gitcommitId;
    public static String     env;
    public static String     doraTestUrl;
    public static String     doraTestUser;
    public static String     doraTestPass;
    public static String     coraTestUrl;
    public static String     coraTestUser;
    public static String     coraTestPass;
    public static String     azTenantId;
    public static String     azClientId;
    public static String     azClientSecret;
    public static Properties appConfig;

    public static String     coraDBHost;
    public static String     coraDBUser;
    public static String     coraDBPass;
    public static String     jumpboxServer;
    public static String     jumpboxUser;
    public static String     jumpboxPass;

    public static boolean    useDbTunnel;

    public static void initialization () {
        try {
            version = System.getProperty ("project.version");
            gitcommitId = System.getProperty ("project.git.commit.id");
            env = System.getProperty ("test.env");

            File config = new File (System.getProperty ("path.to.config"));
            if (!config.exists ())
                config = new File ("config/test.properties");

            appConfig = new Properties ();
            appConfig.load (new FileInputStream (config));

            azTenantId = appConfig.getProperty ("az.tenant.id");
            azClientId = appConfig.getProperty ("az.client.id");

            String encryptedSecret = appConfig.getProperty ("az.client.secret");
            if (!isNullOrEmpty (encryptedSecret))
                azClientSecret = decrypt (encryptedSecret);
        } catch (Exception e) {
            error ("failed to initialize environment properties", e);
            throw new RuntimeException (e);
        }
    }

    protected static String getProperty (String propName) {
        String property = System.getProperty (propName);
        return isNullOrEmpty (property) ? appConfig.getProperty (propName) : property;
    }

    protected static String getPropertyEncrypted (String propName) {
        String property = System.getProperty (propName);
        return isNullOrEmpty (property) ? decrypt (appConfig.getProperty (propName)) : property;
    }
}
